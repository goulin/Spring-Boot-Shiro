<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.inlighting.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="org.inlighting.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="CHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <collection property="roles" ofType="org.inlighting.model.Role">
      <id property="id" column="id"></id>
      <result property="roleName" column="role_name"></result>
      <result property="roleCode" column="role_code"></result>
      <collection property="permissions" ofType="org.inlighting.model.Permission">
        <id property="id" column="pid"></id>
        <result property="resource" column="presource"></result>
      </collection>
    </collection>
  </resultMap>
  <sql id="Base_Column_List" >
    id, age, create_time, name, sex, password
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from T_USER
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from T_USER
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.inlighting.model.User" >
    insert into T_USER (id, age, create_time, 
      name, sex, password)
    values (#{id,jdbcType=INTEGER}, #{age,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{name,jdbcType=VARCHAR}, #{sex,jdbcType=CHAR}, #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.inlighting.model.User" >
    insert into T_USER
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="age != null" >
        age,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.inlighting.model.User" >
    update T_USER
    <set >
      <if test="age != null" >
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.inlighting.model.User" >
    update T_USER
    set age = #{age,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=CHAR},
      password = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <select id="findUserByName" parameterType="String" resultMap="BaseResultMap">
    SELECT u.*,r.*,p.id as pid,p.resource as presource FROM T_USER u inner join T_USER_ROLE ur on ur.uid=u.id
    inner join T_ROLE r on r.id=ur.rid
    inner join T_ROLE_PERMISSION rp on rp.role_id=r.id
    inner join T_PERMISSION p on rp.permission_id =p.id
    WHERE u.name=#{username};
  </select>
</mapper>